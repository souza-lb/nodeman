#!/bin/bash

# nodeman - Node Version Manager

# Autor: Leonardo Bruno
# Contato: souzalb@proton.me
# Versão: 1.0
# Data: 08/07/2025

# Pasta raiz nodeman
DIR_NODEMAN="$HOME/.nodeman"

# Pasta raiz versões node
DIR_NODE_VERSIONS="$DIR_NODEMAN/node_versions"

# Link simbólico para versão corrente
CURRENT_NODE="$DIR_NODE_VERSIONS/current"

# Arquivo configuração de ambiente
FILE_ENV_NODE="$DIR_NODEMAN/node_env"

# Arquivo de repositório com links
FILE_LINK_NODE="$DIR_NODEMAN/link-node.txt"

# Arquivo de lock para controle de concorrência
LOCK_FILE="/tmp/nodeman.lock"

# Verifica e cria lock para operações críticas
check_lock(){
    if [ -f "$LOCK_FILE" ]; then
        local pid
        pid=$(cat "$LOCK_FILE" 2>/dev/null)
        
        if ps -p "$pid" > /dev/null 2>&1; then
            echo "Erro: Operação já em progresso (PID $pid)."
            return 1
        else
            # Remove lock de processo inexistente
            rm -f "$LOCK_FILE"
        fi
    fi
    
    # Cria novo lock
    echo $$ > "$LOCK_FILE"
    return 0
}

# Remove arquivo de lock
release_lock(){
    rm -f "$LOCK_FILE"
}

# Exibe ajuda
show_help(){
    echo "Uso: nodeman [comando]"
    echo ""
    echo "Comandos disponíveis:"
    echo ""
    echo "install [url/arquivo] - Instala nova versão"
    echo "remove  [versão]      - Remove versão"
    echo "list                  - Lista versões disponíveis"
    echo "use     [versão]      - Define uma versão padrão"
    echo "disable               - Desativa versão padrão"
    echo "repo update           - Atualiza lista de links"
    echo "repo list             - Lista versões disponíveis no repositório"
    echo "repo [versão]         - Instala versão específica do repositório"
    echo "help                  - Exibe ajuda"
    return 0
}

# Verifica se versão já está instalada
version_exists(){
    local version="${1:-}"
    
    if [ -d  $DIR_NODE_VERSIONS/$version ]; then
        echo "yes"
    else
        echo "no"
    fi
    return 0
}

# Retorna a versão definida como padrão
get_current_version(){
    local version
    
    if [ -L "$CURRENT_NODE" ]; then
        local full_path version        
        full_path=$(readlink -f "$CURRENT_NODE")
        version=$(basename "$full_path")
        echo "$version"
    else
        echo "none"
    fi
    return 0
}

# Lista todas as versões disponíveis e destaca a versão ativa com "-->"
list_versions(){
    local versions current_version
    
    versions=$(find "$DIR_NODE_VERSIONS" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | sort -V)
    current_version=$(get_current_version)
    
    if [ -z "$versions" ]; then
        echo "Nenhuma versão Node disponível!"
        echo "Execute 'nodeman install' para instalar uma nova versão!"
        return 0
    fi
    
    echo "Versões Node disponíveis:"
    while IFS= read -r version; do
        if [ "$version" = $current_version ]; then
            echo "--> $version"
        else
            echo "    $version"
        fi
    done <<< "$versions"
    return 0
}

# Atualiza arquivo de links do repositório
repo_update(){
    if ! check_lock; then
        return 1
    fi

    echo "Atualizando lista de links..."
    # Executa o comando dentro do diretório nodeman
    cd "$DIR_NODEMAN" || {
        echo "Erro: Não foi possível acessar o diretório $DIR_NODEMAN"
        release_lock
        return 1
    }
    wget -qO- https://raw.githubusercontent.com/souza-lb/node-link-harvester/main/get-link-node | bash
    
    if [ $? -eq 0 ] && [ -f "$FILE_LINK_NODE" ]; then
        echo "Repositório atualizado com sucesso!"
        release_lock
        return 0
    else
        echo "Erro: Falha ao atualizar repositório!"
        release_lock
        return 1
    fi
}

# Lista versões disponíveis no repositório em formato de tabela
repo_list(){
    if [ ! -f "$FILE_LINK_NODE" ]; then
        echo "Repositório não encontrado!"
        echo "Execute 'nodeman repo update' primeiro."
        return 1
    fi

    echo "Versões disponíveis no repositório:"
    echo "----------------------------------"
    printf "%-13s | %s\n" "Versão" "Link"
    echo "----------------------------------"

    while IFS= read -r line; do
        # Extrai versão do formato: node-vX.Y.Z-linux
        if [[ "$line" =~ node-v([0-9]+\.[0-9]+\.[0-9]+)-linux ]]; then
            version="${BASH_REMATCH[1]}"
            printf "%-12s | %s\n" "$version" "$line"
        fi
    done < "$FILE_LINK_NODE"
    return 0
}

# Instala versão específica do repositório
repo_install(){
    local version="${1:-}"
    
    if [ -z "$version" ]; then
        echo "Erro: Versão não informada!"
        show_help
        return 1
    fi
    
    # Valida formato da versão
    if ! [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "Erro: Formato de versão inválido! Use X.Y.Z"
        return 1
    fi
    
    # Verifica se já está instalada
    if [ "$(version_exists "$version")" = "yes" ]; then
        echo "Erro: Versão $version já está instalada!"
        return 1
    fi
    
    # Verifica se arquivo de repositório existe
    if [ ! -f "$FILE_LINK_NODE" ]; then
        echo "Repositório não encontrado!"
        echo "Execute 'nodeman repo update' primeiro."
        return 1
    fi
    
    # Busca link correspondente à versão
    local link
    link=$(grep "node-v$version-linux" "$FILE_LINK_NODE" | head -n1)
    
    if [ -z "$link" ]; then
        echo "Erro: Versão $version não encontrada no repositório!"
        return 1
    fi
    
    echo "Instalando versão $version do repositório..."
    install_version "$link"
}

# Ativa uma versão
use_version(){
    local current_version version=${1:-}
    
    if [ -z "$version" ]; then
        echo "Erro: Versão não informada!"
        show_help
        return 1
    fi
    
    if [ "$(version_exists "$version")" = "no" ]; then
        echo "Erro: Versão não encontrada!"
        list_versions
        return 1
    fi
    
    current_version=$(get_current_version)
    if [ "$current_version" = "$version" ]; then
        echo "A versão '$version' já está ativa"
        return 0
    fi
    
    rm -f "$CURRENT_NODE"
    ln -s "$DIR_NODE_VERSIONS/$version" "$CURRENT_NODE"
    
    if [ ! -f "$FILE_ENV_NODE" ]; then
        echo "export NODE_HOME=\"$CURRENT_NODE\"" >> "$FILE_ENV_NODE"
        echo 'export PATH="$NODE_HOME/bin:$PATH"' >> "$FILE_ENV_NODE"
    fi
    
    echo "Versão $version definida como padrão!"
    echo "Execute 'source ~/.bashrc' para aplicar as mudanças!"
    return 0
}

# Desabilita versão ativa
disable_version(){
    local current_version=$(get_current_version)
    
    if [ "$current_version" = "none" ]; then
        echo "Nenhuma versão node em uso no momento!"
        return 0
    fi
    
    rm -f "$CURRENT_NODE"
    rm -f "$FILE_ENV_NODE"
    
    echo "Versão $current_version desativada com sucesso!"
    echo "Execute 'source ~/.bashrc' para aplicar as alterações!"
    return 0
}

# Instala uma nova versão
install_version(){
    local source file_name temp_dir temp_file version
    
    if ! check_lock; then
        return 1
    fi
    
    source=${1:-}
    
    if [ -z "$source" ]; then
        echo "Erro: [url/arquivo] não fornecido!"
        release_lock
        return 1
    fi
    
    file_name=$(basename "$source")
    version=$(echo "$file_name" | grep -oP 'node-v\K\d+\.\d+\.\d+')
    
    if [ -z "$version" ]; then
        echo "Erro: Não foi possível detectar a versão automaticamente!"
        echo "Exemplos válidos: 22.14.0, 20.12.1"
        read -p "Informe a versão manualmente (sem 'v'): " version < /dev/tty
    fi
    
    if [ -z "$version" ]; then
        echo "Erro: Versão necessária!"
        release_lock
        return 1
    fi

    if ! [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "Erro: Formato inválido! Use X.Y.Z"
        release_lock
        return 1
    fi
    
    if [ "$(version_exists "$version")" = "yes" ]; then
        echo "Erro: A versão '$version' já está instalada!"
        release_lock
        return 1
    fi
    
    temp_dir=$(mktemp -d /tmp/node-XXXXX)
    temp_file=$(basename "$source")
    
    if [[ "$source" =~ ^https?:// ]]; then
        echo "Efetuando o download via url..."
        if ! wget -q --show-progress "$source" -O "$temp_dir/$temp_file"; then
            echo "Erro: Falha no download!"
            rm -rf "$temp_dir"
            release_lock
            return 1
        fi
    else
        if [ -f "$source" ]; then
            echo "Usando arquivo local..."
            cp "$source" "$temp_dir/$temp_file"
        else
            echo "Erro: Arquivo não localizado!"
            rm -rf "$temp_dir"
            release_lock
            return 1
        fi
    fi
    
    echo "Instalando node versao: '$version'..."
    mkdir "$DIR_NODE_VERSIONS/$version"
    if ! tar -xf "$temp_dir/$temp_file" -C "$DIR_NODE_VERSIONS/$version" --strip-components=1; then
        echo "Erro: Falha ao extrair o arquivo!"
        rm -rf "$temp_dir"
        rm -rf "$DIR_NODE_VERSIONS/$version"
        release_lock
        return 1
    fi
    
    rm -rf "$temp_dir"
    
    echo "node versão '$version' instalada com sucesso!"
    echo "Execute: 'nodeman use $version' para utilizar essa versão!"
    
    release_lock
    return 0
}

# Remove uma versão
remove_version(){
    local version current_version response
    
    if ! check_lock; then
        return 1
    fi
    
    version=${1:-}
    current_version=$(get_current_version)
    
    if [ -z "$version" ]; then
        echo "Erro: Informe uma versão para remoção!"
        show_help
        release_lock
        return 1
    fi
    
    if [ "$(version_exists "$version")" = "no" ]; then
        echo "Erro: Versão $version não encontrada!"
        list_versions
        release_lock
        return 1
    fi
    
    current_version=$(get_current_version)
    if [ "$current_version" = "$version" ]; then
        echo "A versão '$version' está em uso!"
        echo "Execute: 'nodeman disable' antes de tentar remover esta versão!"
        release_lock
        return 1
    fi
    
    read -p "Deseja realmente remover a versão $version? [s/N]: " response < /dev/tty
    if [[ ! "$response" =~ ^[Ss]$ ]]; then
        echo "Remoção cancelada."
        release_lock
        return 0
    fi
    
    read -p "Digite o número da versão para confirmar a remoção: " confirm_version < /dev/tty
    if [ "$confirm_version" != "$version" ]; then
        echo "A versão digitada não confere! Remoção cancelada."
        release_lock
        return 0
    fi
    
    echo "Removendo versao: $version..."
    rm -rf "$DIR_NODE_VERSIONS/$version"
    
    echo "Versão $version removida com sucesso!"
    echo "Execute 'source ~/.bashrc' para aplicar as mudanças!"
    
    release_lock
    return 0    
}

# Controle principal de execução
main(){
    case ${1:-} in
        "install")
            install_version "${2:-}"
            ;;
        "remove")
            remove_version "${2:-}"
            ;;
        "list")
            list_versions "${2:-}"
            ;;
        "use")
            use_version "${2:-}"
            ;;
        "disable")
            disable_version
            ;;
        "repo")
            case ${2:-} in
                "update")
                    repo_update
                    ;;
                "list")
                    repo_list
                    ;;
                *)
                    if [ -z "$2" ]; then
                        echo "Erro: Comando 'repo' requer subcomando!"
                        show_help
                        return 1
                    fi
                    repo_install "$2"
                    ;;
            esac
            ;;
        "help"|"")
            show_help
            ;;
        *)
             echo "Erro: Comando inválido! '${1:-}'"
             show_help
             return 1
             ;;
    esac     
}

main "$@"
